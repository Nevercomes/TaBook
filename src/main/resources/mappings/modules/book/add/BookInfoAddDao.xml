<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nevercome.tabook.modules.book.dao.add.BookInfoAddDao">
    <sql id="bookInfoAddColumns">
        a.id AS "id",
        a.create_by AS "createBy.id",
        a.update_by AS "updateBy.id",
        a.create_time AS "createTime",
        a.update_time AS "updateTime",
        a.del_flag AS "delFlag",
        a.remarks AS "remarks",
        a.book_root_id AS "bookRootId",
        a.book_class_id AS "bookClassId",
        a.name AS "name",
        a.author AS "author",
        a.press AS "press",
        a.year AS "year",
        a.owner_comment AS "ownerComment",
        a.type AS "type",
        a.price AS "price",
        a.new_percent AS "newPercent"
    </sql>

    <sql id="bookInfoAddListColumns">

    </sql>

    <sql id="bookInfoAddJoins">

    </sql>

    <select id="get" resultType="BookInfoAdd">
        SELECT
        <include refid="bookInfoAddColumns"/>
        FROM book_info_add a
        <include refid="bookInfoAddJoins"/>
        WHERE a.id = #{id}
    </select>

    <select id="findList" resultType="BookInfoAdd">
        SELECT
        <include refid="bookInfoAddColumns"/>
        <!--,-->
        <!--<include refid="bookInfoAddListColumns"/>-->
        FROM book_info_add a
        <include refid="bookInfoAddJoins"/>
        <where>
            a.del_flag = 0
            <if test="studentId != null and studentId != ''">
                AND a.student_id = #{studentId}
            </if>
            <if test="type != null and type != ''">
                AND a.type = #{type}
            </if>
        </where>
        <choose>
            <when test="page !=null and page.orderBy != null and page.orderBy != ''">
                ORDER BY ${page.orderBy}
            </when>
            <otherwise>
                ORDER BY a.update_time DESC
            </otherwise>
        </choose>
    </select>

    <select id="findAllList" resultType="BookInfoAdd">
        SELECT
        <include refid="bookInfoAddColumns"/>
        FROM book_info_add a
        <include refid="bookInfoAddJoins"/>
        <where>
            a.del_flag = 0
        </where>
        ORDER BY a.update_time DESC
    </select>

    <insert id="insert">
        INSERT INTO book_info_add (
            id,
            create_by,
            update_by,
            create_time,
            update_time,
            del_flag,
            remarks,
            book_root_id,
            book_class_id,
            `name`,
            author,
            press,
            `year`,
            owner_comment,
            type,
            price,
            new_percent,
            student_id
        ) VALUES (
            #{id},
            #{createBy.id},
            #{createBy.id},
            #{createTime},
            #{updateTime},
            #{delFlag},
            #{remarks},
            #{bookRootId},
            #{bookClassId},
            #{name},
            #{author},
            #{press},
            #{year},
            #{ownerComment},
            #{type},
            #{price},
            #{newPercent},
            #{studentId}
        )
    </insert>

    <update id="update">
        UPDATE book_info_add
        SET
        update_by = #{createBy.id},
        update_time = #{updateTime},
        del_flag = #{delFlag},
        remarks = #{remarks},
        <!--book_root_id  = #{bookRootId},
        book_class_id = #{bookClassId},
        `name`        = #{name},
        author        = #{author},
        press         = #{press},
        `year`        = #{year},-->
        owner_comment = #{ownerComment},
        type = #{type},
        price = #{price},
        new_percent = #{newPercent}
        WHERE id = #{id}
    </update>

    <update id="delete">
        UPDATE book_info_add
        SET del_flag = 1
        WHERE id = #{id}
    </update>

</mapper>